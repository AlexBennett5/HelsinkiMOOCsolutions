import java.lang.Math;

import java.util.List;
import java.util.Collections;
import java.util.ArrayList;

public class ContainerHistory {
    private List<Double> history;
    
    public ContainerHistory() {
        this.history = new ArrayList<Double>();
    }
    
    public void add(double situation) {
        this.history.add(situation);
    }
    
    public void reset() {
        this.history.clear();
    }
    
    public double maxValue() {
        return Collections.max(this.history);
    }
    
    public double minValue() {
        return Collections.min(this.history);
    }
    
    public double average() {
        if (this.history.isEmpty()) {
            return 0;
        } else {
            double total = 0;
            
            for (Double var : this.history) {
                total += var;
            }
            
            return total / this.history.size();
        }
    }
    
    //Returns greatest function btwn two consecutive values in list
    public double greatestFluctuation() {
        double maxEndingHere = 0;
        
        for (int i = 0; i < this.history.size() - 1; i++) {
            double value = Math.abs(this.history.get(i) - this.history.get(i + 1));
            maxEndingHere = Math.max(maxEndingHere, value);
        }
        
        return maxEndingHere;
    }
    
    //Returns sample variance for all list values
    public double variance() {
        double sum = 0;
        
        for (Double var : this.history) {
            sum += Math.pow((var - this.average()), 2);
        }
        
        sum /= (this.history.size() - 1);
        
        return sum;
    }
    
    public String toString() {
        return this.history.toString();
    }
}
